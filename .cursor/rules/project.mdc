**_IMPORTANT INFO_**
we are starting this business, we dont have any client or pricess decided, but we want this site in such way that people look at thios site like professionls ared doing this, although we are new but we dont people to consider us as new

use Hamper or Hampers or hamper, wherever required instead of Gift, Gifting, etc...

so when you write or design something. CURRENT THEME SHOULD NOT IMPACT and also TONE SHOULD NOT AFFECT by your actions.

## üèóÔ∏è TECHNICAL STANDARDS

**Company**: Shubhhampers (The Little Basket)
**Contact**: +91 96858 47274, connect@shubhhampers.com
**Framework**: Next.js 15 + App Router + TypeScript
**Performance Issue**: 15 client components - REDUCE to max 8
**Verification**: ALWAYS run `npm run verify` before commits

**Brand Colors (STRICT)**:
--brand-light: #f1dea8; --brand-gold: #e9c579; --brand-amber: #daa755;
--brand-brown: #9f6920; --brand-dark: #462506;

## üß¨ ATOMIC DESIGN COMPONENT RULES (MANDATORY)

**ALWAYS follow Atomic Design structure when creating ANY component:**

### Component Creation Process:

1. **FIRST**: Break down the new component into its smallest elements
2. **CHECK**: Are any of these elements already available as atoms? ‚Üí USE THEM
3. **CHECK**: Are any combinations available as molecules? ‚Üí USE THEM
4. **CHECK**: Are any sections available as organisms? ‚Üí USE THEM
5. **CREATE**: Only create NEW components in the relevant category if they don't exist

### Component Hierarchy:

- **üî¨ Atoms**: Basic elements (Button, Input, Typography, Icon) ‚Üí Location: `src/ui-kit/`
- **üß™ Molecules**: Simple combinations (SearchBox, ContactCard, FormField) ‚Üí Location: `src/components/molecules/`
- **ü¶† Organisms**: Complex sections (Header, Footer, ProductGrid) ‚Üí Location: `src/components/organisms/`
- **üìã Templates**: Page layouts ‚Üí Location: `src/components/templates/`
- **üìÑ Pages**: Actual content ‚Üí Location: `src/app/`

### Example Process:

```
Creating ContactForm component:
1. Break down: Form + Label + Input + Button + ErrorMessage
2. Check atoms: Button exists in ui-kit/ ‚Üí USE IT
3. Check atoms: Input exists in ui-kit/ ‚Üí USE IT
4. Check molecules: FormField (Label+Input+Error) doesn't exist ‚Üí CREATE as molecule
5. Result: ContactForm organism uses FormField molecule + Button atom
```

**RULE**: Never duplicate existing components. Always reuse from lower levels of the hierarchy.

## üé® COMPONENT VARIATION RULES (MANDATORY)

**NO custom properties - CREATE variations instead:**

### Variation Rules:

1. **NO Custom Props**: Avoid complex prop-based variations like `variant`, `size`, `type` props
2. **SAME Elements**: If variation has same elements ‚Üí Create component variation
3. **DIFFERENT Elements**: If elements change ‚Üí Create separate component first, then use
4. **Composition Over Configuration**: Prefer multiple specific components over one configurable component

### Variation Examples:

‚ùå **AVOID** - Complex prop-based components:

```typescript
// DON'T DO THIS
<Button variant="primary" size="large" icon="arrow" />
<Button variant="secondary" size="small" />
<Card type="product" layout="grid" showImage={true} />
```

‚úÖ **DO** - Create specific variations:

```typescript
// DO THIS - Same elements, different styling
<PrimaryButton>Contact Us</PrimaryButton>
<SecondaryButton>Learn More</SecondaryButton>
<PrimaryLargeButton icon="arrow">Get Started</PrimaryLargeButton>

// DO THIS - Different elements, separate components
<ProductCard />      // has image + title + price + button
<ServiceCard />      // has icon + title + description + link
<TestimonialCard />  // has quote + author + rating
```

### Implementation Process:

```
Need a variation?
1. ANALYZE: Are the elements the same or different?
2. SAME ELEMENTS: Create variation (PrimaryButton, SecondaryButton)
3. DIFFERENT ELEMENTS: Create new component (ProductCard vs ServiceCard)
4. COMPOSE: Use atomic design hierarchy for new components
```

### File Organization for Variations:

```
src/ui-kit/
‚îú‚îÄ‚îÄ Button/
‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx           // Base button atom
‚îÇ   ‚îú‚îÄ‚îÄ PrimaryButton.tsx    // Variation
‚îÇ   ‚îú‚îÄ‚îÄ SecondaryButton.tsx  // Variation
‚îÇ   ‚îî‚îÄ‚îÄ IconButton.tsx       // Different elements = separate component

src/components/molecules/
‚îú‚îÄ‚îÄ Cards/
‚îÇ   ‚îú‚îÄ‚îÄ ProductCard.tsx      // Different elements
‚îÇ   ‚îú‚îÄ‚îÄ ServiceCard.tsx      // Different elements
‚îÇ   ‚îî‚îÄ‚îÄ TestimonialCard.tsx  // Different elements
```

**RULE**: Prefer multiple simple components over one complex configurable component.

## ‚ôø ACCESSIBILITY & SEMANTIC HTML (MANDATORY)

**ALWAYS implement accessibility when creating ANY component:**

### A11y Requirements for ALL Components:

1. **Semantic HTML**: Use proper HTML5 semantic tags (`<button>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<header>`, `<footer>`)
2. **ARIA Labels**: Add `aria-label`, `aria-describedby`, `aria-labelledby` for screen readers
3. **Focus Management**: Visible focus indicators with `focus:ring-2 focus:ring-brand-gold`
4. **Keyboard Navigation**: All interactive elements accessible via keyboard
5. **Color Contrast**: Ensure WCAG 2.1 AA compliance (4.5:1 ratio minimum)

### Required A11y Patterns:

```typescript
// Button Component
<button
  aria-label="Contact us via WhatsApp"
  className="focus:outline-none focus:ring-2 focus:ring-brand-gold"
  onKeyDown={(e) => e.key === 'Enter' && onClick?.(e)}
>

// Form Field
<div>
  <label htmlFor={fieldId} className="sr-only sm:not-sr-only">
    {label} {required && <span aria-label="required">*</span>}
  </label>
  <input
    id={fieldId}
    aria-describedby={error ? `${fieldId}-error` : undefined}
    aria-invalid={error ? 'true' : 'false'}
  />
  {error && (
    <div id={`${fieldId}-error`} role="alert" aria-live="polite">
      {error}
    </div>
  )}
</div>

// Navigation
<nav role="navigation" aria-label="Main navigation">
  <ul role="list">
    <li><a href="/collections" aria-current={isActive ? 'page' : undefined}>Collections</a></li>
  </ul>
</nav>
```

## üîí SECURITY IMPLEMENTATION (MANDATORY)

**ALWAYS implement security when components require it:**

### Security Rules for Components:

1. **Input Validation**: Use Zod schemas for all form inputs
2. **XSS Prevention**: Sanitize user inputs with DOMPurify
3. **CSRF Protection**: Use Next.js built-in CSRF protection
4. **Rate Limiting**: Implement for API-calling components
5. **Content Security**: Never use `dangerouslySetInnerHTML` without sanitization

### Security Patterns:

```typescript
// Input Validation with Zod
import { z } from 'zod';
const schema = z.object({
  email: z.string().email(),
  message: z.string().min(10).max(1000)
});

// Sanitization
import DOMPurify from 'isomorphic-dompurify';
const sanitized = DOMPurify.sanitize(userInput);

// Safe HTML Rendering
<div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(content) }} />
```

## üìã FORM HANDLING (MANDATORY)

**ALWAYS use React Hook Form for ALL forms:**

### Form Requirements:

1. **React Hook Form ONLY**: Never use useState for form management
2. **Validation**: Integrate with Zod for schema validation
3. **Error Handling**: Proper error states with accessibility
4. **Loading States**: Show loading during submission
5. **Success Feedback**: Clear success/failure messages

### React Hook Form Pattern:

```typescript
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

const ContactForm = () => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset
  } = useForm({
    resolver: zodResolver(contactSchema)
  });

  const onSubmit = async (data) => {
    try {
      await submitForm(data);
      reset();
    } catch (error) {
      // Handle error
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input
        {...register('email')}
        aria-invalid={errors.email ? 'true' : 'false'}
        aria-describedby={errors.email ? 'email-error' : undefined}
      />
      {errors.email && (
        <div id="email-error" role="alert">
          {errors.email.message}
        </div>
      )}
    </form>
  );
};
```

## üîí SECURITY GAPS (HIGH PRIORITY)

- No CSP headers
- No input validation on contact forms
- No rate limiting on APIs
- Missing security headers

## ‚ôø ACCESSIBILITY (REQUIRED)

- Target: WCAG 2.1 AA compliance
- Add ARIA labels to all interactive elements
- Proper focus indicators and keyboard navigation

## üöÄ WORKFLOW

**Before ANY work**: Read these rules + run `npm run verify:quick`
**During development**: Server Components first, minimal "use client"
**Before commit**: `npm run verify` must pass

## üìä CURRENT PRIORITIES

1. Reduce 15 client components to ~8
2. Add accessibility features (WCAG 2.1 AA)
3. Implement security headers and input validation
4. Add Atomic Design structure for maintainability

**GOLDEN RULE**: Professional image + "hamper" terminology + accessibility + performance first
