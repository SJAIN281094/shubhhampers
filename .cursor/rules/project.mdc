**_IMPORTANT INFO_**
we are starting this business, we dont have any client or pricess decided, but we want this site in such way that people look at thios site like professionls ared doing this, although we are new but we dont people to consider us as new

use Hamper or Hampers or hamper, wherever required instead of Gift, Gifting, etc...

so when you write or design something. CURRENT THEME SHOULD NOT IMPACT and also TONE SHOULD NOT AFFECT by your actions.

## 🏗️ TECHNICAL STANDARDS

**Company**: Shubhhampers (The Little Basket)
**Contact**: +91 96858 47274, connect@shubhhampers.com
**Framework**: Next.js 15 + App Router + TypeScript
**Performance Issue**: 15 client components - REDUCE to max 8
**Verification**: ALWAYS run `npm run verify` before commits

**Brand Colors (STRICT)**:
--brand-light: #f1dea8; --brand-gold: #e9c579; --brand-amber: #daa755;
--brand-brown: #9f6920; --brand-dark: #462506;

## 🧬 ATOMIC DESIGN COMPONENT RULES (MANDATORY)

**ALWAYS follow Atomic Design structure when creating ANY component:**

### Component Creation Process:

1. **FIRST**: Break down the new component into its smallest elements
2. **CHECK**: Are any of these elements already available as atoms? → USE THEM
3. **CHECK**: Are any combinations available as molecules? → USE THEM
4. **CHECK**: Are any sections available as organisms? → USE THEM
5. **CREATE**: Only create NEW components in the relevant category if they don't exist

### Component Hierarchy:

- **🔬 Atoms**: Basic elements (Button, Input, Typography, Icon) → Location: `src/ui-kit/`
- **🧪 Molecules**: Simple combinations (SearchBox, ContactCard, FormField) → Location: `src/components/molecules/`
- **🦠 Organisms**: Complex sections (Header, Footer, ProductGrid) → Location: `src/components/organisms/`
- **📋 Templates**: Page layouts → Location: `src/components/templates/`
- **📄 Pages**: Actual content → Location: `src/app/`

### Example Process:

```
Creating ContactForm component:
1. Break down: Form + Label + Input + Button + ErrorMessage
2. Check atoms: Button exists in ui-kit/ → USE IT
3. Check atoms: Input exists in ui-kit/ → USE IT
4. Check molecules: FormField (Label+Input+Error) doesn't exist → CREATE as molecule
5. Result: ContactForm organism uses FormField molecule + Button atom
```

**RULE**: Never duplicate existing components. Always reuse from lower levels of the hierarchy.

## 🔒 SECURITY GAPS (HIGH PRIORITY)

- No CSP headers
- No input validation on contact forms
- No rate limiting on APIs
- Missing security headers

## ♿ ACCESSIBILITY (REQUIRED)

- Target: WCAG 2.1 AA compliance
- Add ARIA labels to all interactive elements
- Proper focus indicators and keyboard navigation

## 🚀 WORKFLOW

**Before ANY work**: Read these rules + run `npm run verify:quick`
**During development**: Server Components first, minimal "use client"
**Before commit**: `npm run verify` must pass

## 📊 CURRENT PRIORITIES

1. Reduce 15 client components to ~8
2. Add accessibility features (WCAG 2.1 AA)
3. Implement security headers and input validation
4. Add Atomic Design structure for maintainability

**GOLDEN RULE**: Professional image + "hamper" terminology + accessibility + performance first
